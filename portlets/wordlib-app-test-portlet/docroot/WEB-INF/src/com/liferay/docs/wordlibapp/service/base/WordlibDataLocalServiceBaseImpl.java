/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.docs.wordlibapp.service.base;

import com.liferay.docs.wordlibapp.model.WordlibData;
import com.liferay.docs.wordlibapp.service.WordlibDataLocalService;
import com.liferay.docs.wordlibapp.service.persistence.WordlibDataPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the wordlib data local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.docs.wordlibapp.service.impl.WordlibDataLocalServiceImpl}.
 * </p>
 *
 * @author mike
 * @see com.liferay.docs.wordlibapp.service.impl.WordlibDataLocalServiceImpl
 * @see com.liferay.docs.wordlibapp.service.WordlibDataLocalServiceUtil
 * @generated
 */
public abstract class WordlibDataLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements WordlibDataLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.docs.wordlibapp.service.WordlibDataLocalServiceUtil} to access the wordlib data local service.
	 */

	/**
	 * Adds the wordlib data to the database. Also notifies the appropriate model listeners.
	 *
	 * @param wordlibData the wordlib data
	 * @return the wordlib data that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WordlibData addWordlibData(WordlibData wordlibData)
		throws SystemException {
		wordlibData.setNew(true);

		return wordlibDataPersistence.update(wordlibData);
	}

	/**
	 * Creates a new wordlib data with the primary key. Does not add the wordlib data to the database.
	 *
	 * @param wordlibId the primary key for the new wordlib data
	 * @return the new wordlib data
	 */
	@Override
	public WordlibData createWordlibData(long wordlibId) {
		return wordlibDataPersistence.create(wordlibId);
	}

	/**
	 * Deletes the wordlib data with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param wordlibId the primary key of the wordlib data
	 * @return the wordlib data that was removed
	 * @throws PortalException if a wordlib data with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WordlibData deleteWordlibData(long wordlibId)
		throws PortalException, SystemException {
		return wordlibDataPersistence.remove(wordlibId);
	}

	/**
	 * Deletes the wordlib data from the database. Also notifies the appropriate model listeners.
	 *
	 * @param wordlibData the wordlib data
	 * @return the wordlib data that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WordlibData deleteWordlibData(WordlibData wordlibData)
		throws SystemException {
		return wordlibDataPersistence.remove(wordlibData);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(WordlibData.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return wordlibDataPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.wordlibapp.model.impl.WordlibDataModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return wordlibDataPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.wordlibapp.model.impl.WordlibDataModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return wordlibDataPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return wordlibDataPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return wordlibDataPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public WordlibData fetchWordlibData(long wordlibId)
		throws SystemException {
		return wordlibDataPersistence.fetchByPrimaryKey(wordlibId);
	}

	/**
	 * Returns the wordlib data with the primary key.
	 *
	 * @param wordlibId the primary key of the wordlib data
	 * @return the wordlib data
	 * @throws PortalException if a wordlib data with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public WordlibData getWordlibData(long wordlibId)
		throws PortalException, SystemException {
		return wordlibDataPersistence.findByPrimaryKey(wordlibId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return wordlibDataPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the wordlib datas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.wordlibapp.model.impl.WordlibDataModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of wordlib datas
	 * @param end the upper bound of the range of wordlib datas (not inclusive)
	 * @return the range of wordlib datas
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<WordlibData> getWordlibDatas(int start, int end)
		throws SystemException {
		return wordlibDataPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of wordlib datas.
	 *
	 * @return the number of wordlib datas
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getWordlibDatasCount() throws SystemException {
		return wordlibDataPersistence.countAll();
	}

	/**
	 * Updates the wordlib data in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param wordlibData the wordlib data
	 * @return the wordlib data that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WordlibData updateWordlibData(WordlibData wordlibData)
		throws SystemException {
		return wordlibDataPersistence.update(wordlibData);
	}

	/**
	 * Returns the wordlib data local service.
	 *
	 * @return the wordlib data local service
	 */
	public com.liferay.docs.wordlibapp.service.WordlibDataLocalService getWordlibDataLocalService() {
		return wordlibDataLocalService;
	}

	/**
	 * Sets the wordlib data local service.
	 *
	 * @param wordlibDataLocalService the wordlib data local service
	 */
	public void setWordlibDataLocalService(
		com.liferay.docs.wordlibapp.service.WordlibDataLocalService wordlibDataLocalService) {
		this.wordlibDataLocalService = wordlibDataLocalService;
	}

	/**
	 * Returns the wordlib data remote service.
	 *
	 * @return the wordlib data remote service
	 */
	public com.liferay.docs.wordlibapp.service.WordlibDataService getWordlibDataService() {
		return wordlibDataService;
	}

	/**
	 * Sets the wordlib data remote service.
	 *
	 * @param wordlibDataService the wordlib data remote service
	 */
	public void setWordlibDataService(
		com.liferay.docs.wordlibapp.service.WordlibDataService wordlibDataService) {
		this.wordlibDataService = wordlibDataService;
	}

	/**
	 * Returns the wordlib data persistence.
	 *
	 * @return the wordlib data persistence
	 */
	public WordlibDataPersistence getWordlibDataPersistence() {
		return wordlibDataPersistence;
	}

	/**
	 * Sets the wordlib data persistence.
	 *
	 * @param wordlibDataPersistence the wordlib data persistence
	 */
	public void setWordlibDataPersistence(
		WordlibDataPersistence wordlibDataPersistence) {
		this.wordlibDataPersistence = wordlibDataPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.docs.wordlibapp.model.WordlibData",
			wordlibDataLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.docs.wordlibapp.model.WordlibData");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return WordlibData.class;
	}

	protected String getModelClassName() {
		return WordlibData.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = wordlibDataPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.docs.wordlibapp.service.WordlibDataLocalService.class)
	protected com.liferay.docs.wordlibapp.service.WordlibDataLocalService wordlibDataLocalService;
	@BeanReference(type = com.liferay.docs.wordlibapp.service.WordlibDataService.class)
	protected com.liferay.docs.wordlibapp.service.WordlibDataService wordlibDataService;
	@BeanReference(type = WordlibDataPersistence.class)
	protected WordlibDataPersistence wordlibDataPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private WordlibDataLocalServiceClpInvoker _clpInvoker = new WordlibDataLocalServiceClpInvoker();
}